


local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Debris = game:GetService("Debris")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local src = ReplicatedStorage.src
local pcar = src.pcar

local CarInput = require(pcar.CarInput)
local CarPlacer = require(pcar.CarPlacer)
local CarTracker = require(pcar.CarTracker)
local ClientCarState = require(pcar.ClientCarState)

function Velocity(Model)
	for c,v in pairs(Model:GetDescendants()) do
		if v:IsA("BasePart") then
			v.Velocity = Vector3.new()
			v.RotVelocity = Vector3.new()
		end
	end
	return
end

hookfunction(CarInput.GetNitro,function()
	return true
end)

local z,Size = CarTracker.getCarFromDriver(LocalPlayer):GetBoundingBox()

local Part = Instance.new("Part")
Part.Name = HttpService:GenerateGUID(true)
Part.CFrame = CFrame.new(0, -50, 0)
Part.Anchored = true
Part.Size = Vector3.new(30, 1, 4000)
Part.Color = Color3.new(99,1,20)
Part.Parent = workspace


Velocity(CarTracker.getCarFromDriver(LocalPlayer))
CarPlacer.place(nil, CarTracker.getCarFromDriver(LocalPlayer), Part.CFrame + Vector3.new(0, Part.Size.Y / 2 + Size.Y / 2, Part.Size.Z / 2 - Size.Z / 2))
RunService.RenderStepped:Connect(function()
	local CFramenew, _ = CarTracker.getCarFromDriver(LocalPlayer):GetBoundingBox()
	if Part.CFrame:ToObjectSpace(CFramenew).Z < -Part.Size.Z / 2 + Size.Z / 2 then
		CarPlacer.place(nil, CarTracker.getCarFromDriver(LocalPlayer), Part.CFrame + Vector3.new(0, Part.Size.Y / 2 + Size.Y / 2, Part.Size.Z / 2 - Size.Z / 2))
	end
end)
